plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

repositories {
    maven { url 'https://jitpack.io' }
}

configurations {
    gormTestCompile.extendsFrom integrationTestCompile
    gormTestRuntime.extendsFrom integrationTestRuntime
    gormTestImplementation.extendsFrom integrationTestImplementation

    mdTestCompile.extendsFrom integrationTestCompile
    mdTestRuntime.extendsFrom integrationTestRuntime
    mdTestImplementation.extendsFrom integrationTestImplementation

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs += ["src/main/java"]

sourceSets {
//    gormTest {
//        groovy.srcDir file('src/gormTest/groovy')
//        groovy.srcDir file('src/integrationTest/groovy/ai/stainless/micronaut/jupyter/kernel')
//        groovy.exclude { FileTreeElement elem ->
//            elem.file.absolutePath.contains('src/integrationTest/groovy') &&
//                    !elem.file.absolutePath.contains('KernelSpec.groovy')
//        }
//        resources.srcDir file('src/test/resources')
//        compileClasspath += sourceSets.main.output + configurations.testRuntime
//        runtimeClasspath += output + compileClasspath
//    }

    mdTest {
        groovy.srcDir file('src/mdTest/groovy')
        groovy.srcDir file('src/integrationTest/groovy/ai/stainless/micronaut/jupyter/kernel')
        groovy.exclude { FileTreeElement elem ->
            elem.file.absolutePath.contains('src/integrationTest/groovy') &&
                    !elem.file.absolutePath.contains('KernelSpec.groovy')
        }
        resources.srcDir file('src/test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }

    integrationTest {
        groovy.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    annotationProcessor platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    implementation("io.micronaut.rxjava2:micronaut-rxjava2:1.2.0")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-client:1.2.0")

    implementation "org.apache.groovy:groovy-all:$groovyVersion"
    implementation "org.apache.groovy:groovy-xml:$groovyVersion"

    implementation platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    implementation "io.micronaut:micronaut-inject-groovy"
    implementation "io.micronaut:micronaut-messaging"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-management"
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation "io.micronaut.security:micronaut-security"
    implementation "com.twosigma:beakerx-kernel-base:$beakerxVersion"
    implementation "com.twosigma:beakerx-kernel-groovy:$beakerxVersion"

    testAnnotationProcessor platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation "org.apache.groovy:groovy-test:$groovyVersion"

    // Use the awesome Spock testing and specification framework
    testImplementation "org.spockframework:spock-core:$spockVersion"

    testImplementation "io.micronaut.test:micronaut-test-core:$micronautTestVersion"
    testImplementation "io.micronaut.test:micronaut-test-spock:$micronautTestVersion"
    testImplementation "io.micronaut.test:micronaut-test-junit5:$micronautTestVersion"
    testImplementation platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut:micronaut-http-server-netty"
    testImplementation "io.micronaut:micronaut-http-client"
    testImplementation "org.objenesis:objenesis:1.4"
    testImplementation "ch.qos.logback:logback-classic:1.2.3"

    integrationTestImplementation "org.testcontainers:spock:1.12.3"

    mdTestImplementation "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
    mdTestImplementation "io.micronaut.configuration:micronaut-jdbc-tomcat:1.2.3"
    mdTestImplementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion"
    mdTestRuntimeOnly "com.h2database:h2:1.4.200"

//    gormTestImplementation "io.micronaut.configuration:micronaut-hibernate-gorm:1.1.1"
//    gormTestImplementation "io.micronaut.configuration:micronaut-jdbc-tomcat:1.2.3"
//    // For some reason, the gorm tests would fail with a NullPointerException
//    // if this dependency wasn't included
//    // There must be some sort of transitive dependency that the gorm tests
//    // need
//    gormTestImplementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion", {
//        exclude group: 'io.micronaut.configuration', module: 'micronaut-hibernate-jpa-spring'
//    }
//    gormTestRuntimeOnly "com.h2database:h2:1.4.200"
}

// get tests filter
def testsFilter = project.hasProperty("tests") ? tests : "*"
// count total tests
def testCount = 0

def createCheckTests = { isTest ->
    return {
        if (testCount != 0 || !gradle.startParameter.taskNames.contains(name)) {
            return
        }
        def testTasks = taskDependencies.getDependencies()
                .collect { [it, it.getDependsOn()] }
                .flatten()
                .findAll { it instanceof Test && it.didWork }
        if (isTest && didWork) {
            testTasks.add([name: name])
        }
        // if any of our dependent test tasks ran
        if (testTasks.size()) {
            logger.warn(
                    "Warning: No tests found for the given includes: [$testsFilter] among tasks: ${testTasks.collect { it.name }}"
            )
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
    failFast = false
    filter {
        includeTestsMatching testsFilter
        failOnNoMatchingTests = false
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            testCount += result.testCount
        }
    }
    doLast createCheckTests(true)
}

//task gormTest(type: Test) {
//    testClassesDirs = sourceSets.gormTest.output.classesDirs
//    classpath = sourceSets.gormTest.runtimeClasspath
//}

task mdTest(type: Test) {
    testClassesDirs = sourceSets.mdTest.output.classesDirs
    classpath = sourceSets.mdTest.runtimeClasspath
}

task basicIntegrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task unitTest(type: Test) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task integrationTest() {
    dependsOn basicIntegrationTest
    // dependsOn gormTest
    dependsOn mdTest

    outputs.upToDateWhen { false }
    doLast createCheckTests()
}

test.dependsOn unitTest
test.dependsOn integrationTest
test.outputs.upToDateWhen { false }
test.doLast {
    createCheckTests()
}

task copyGroovydoc(type: Copy) {
    from "${project.buildDir}/docs/groovydoc"
    into "${rootProject.buildDir}/docs/gapi"
}

groovydoc {
    finalizedBy copyGroovydoc
}

publishing {
    publications {
        micronautJupyter(MavenPublication) {
            artifactId = 'micronaut-jupyter'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = artifactId
                description = projectDesc
                url = projectUrl
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = "Joshua Carter"
                        email = "jcarter@stainless.ai"
                        organization = "Stainless.Ai"
                        organizationUrl = "https://stainless.ai"
                    }
                    developer {
                        name = "Dan Stieglitz"
                        email = "dstieglitz@stainless.ai"
                        organization = "Stainless.Ai"
                        organizationUrl = "https://stainless.ai"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/${githubSlug}.git"
                    developerConnection = "scm:git:ssh://github.com:${githubSlug}.git"
                    url = "http://github.com/${githubSlug}/tree/$githubBranch"
                }
            }
        }
    }
}

//signing {
//    sign publishing.publications.jupyterConfigurationLibrary
//}
